﻿@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<Dnn.Appointment.Debug.DnnAppointmentDebug.Models.CreateAppointment>

@using System.Web.Mvc;
@using DotNetNuke.Web.Client.ClientResourceManagement;
@using DotNetNuke.Framework.JavaScriptLibraries;
@using Dnn.Appointment.Debug.DnnAppointmentDebug.Models;
@using System.Net.Mail;

@{
    ClientResourceManager.RegisterScript(Dnn.DnnPage, "~/DesktopModules/MVC/DnnAppointmentDebug/Scripts/Scripts.js");
    ClientResourceManager.RegisterStyleSheet(Dnn.DnnPage, "~/DesktopModules/MVC/DnnAppointmentDebug/Content/Create.css");
    var carTypeOptions = ViewBag.CarTypes as SelectList;
}

@using System.Collections.Generic
@using DotNetNuke.Web.Mvc.Helpers

<div class="createFormWrapper">
    <div class="createFormHeader">
        <h1>Create an appointment</h1>
    </div>
    <div class="createFormContainer">
        <div d="Item-@Dnn.ModuleContext.ModuleId">
            <div class="dnnForm dnnEditBasicSettings">
                    <fieldset>
                        <div class="dnnFormItem">
                            <div><label for="DateID">Válasszon ki egy napot</label></div>
                            <input type="date" id="DateTime" name="DateID" required value="@DateTime.Now.ToString("yyyy-MM-dd")"/>
                            <p id="DateError"></p>
                        </div>
                        <div class="dnnFormItem">
                            <div><label for="DateID">Időpont kezdete</label></div>
                            <input id="StartTime" type="time" value="09:00" required />
                            <p id="StartError"></p>
                        </div>
                        <div class="dnnFormItem">
                            <div><label for="DateID">Időpont vége</label></div>
                            <input id="EndTime" type="time" value="16:00" required />
                            <p id="EndError"></p>
                        </div>
                    </fieldset>
                    <fieldset>
                        <div class="dnnFormItem">
                            <div><label for="UserID">Vezetéknév</label></div>
                            <input type="text" placeholder="E.g. Tow" id="LastName" required />
                            <p id="LastNameError"></p>
                        </div>
                        <div class="dnnFormItem">
                            <div><label for="UserID">Keresztnév</label></div>
                            <input type="text" placeholder="E.g. Mater" id="FirstName" required />
                            <p id="FirstNameError"></p>
                        </div>
                        <div class="dnnFormItem">
                            <div><label for="UserID">Email</label></div>
                            <input type="email" placeholder="example@example.com" id="Email" required />
                            <p id="EmailError"></p>
                        </div>
                        <div class="dnnFormItem">
                            <div><label for="UserID">Telefonszám</label></div>
                            <input type="tel" placeholder="+12345678" id="PhoneNumber" required />
                            <p id="PhoneError"></p>
                        </div>
                        <div class="dnnFormItem">
                            <div><label for="UserID">Autó típusa</label></div>
                            @Html.DropDownList("CarType", carTypeOptions)
                            <p id="CarTypeError"></p>
                        </div>
                        <div class="dnnFormItem">
                            <div><label for="UserID">Autó gyártási éve</label></div>
                            <input type="number" placeholder="E.g. 2024" id="Year" required />
                            <p id="YearError"></p>
                        </div>
                    </fieldset>
                    <div class="buttonContainer">
                        <div class="buttonCancelContainer">
                            <button class="cancelButton" id="cancel">Mégsem</button>
                        </div>
                        <div class="buttonCreateContainer">
                            <button class="createButton" id="appointmentCreateButton" type="button">Időpont foglalása</button>
                        </div>
                    </div>
            </div>
        </div>
    </div>
    
</div>


<script type="text/javascript">
    /*globals jQuery, window, Sys */
    (function ($, Sys) {
        $(function () {
            $('#cancel').click(function () { dnnModal.closePopUp(false); });

            $('#appointmentCreateButton').click(function () {
                var dateTime = $('#DateTime').val();
                if (Date.parse(dateTime) < Date.now() + 518400000) {
                    $('#DateError').text('A mai naphoz képest legalább egy héttel későbbi időpontot kell választani');
                    return;
                }
                else { $('#DateError').text(''); }

                var startTime = $('#StartTime').val();
                var partsStart = startTime.split(":");
                var hoursStart = parseInt(partsStart[0]);
                var minutesStart = parseInt(partsStart[1]);
                var totalMinutesStart = hoursStart * 60 + minutesStart;
                if (totalMinutesStart < 9 * 60 || totalMinutesStart > 15 * 60) {
                    $('#StartError').text('Az időpont kezdetének 9:00 és 15:00 között kell lennie');
                    return;
                }
                else { $('#StartError').text(''); }

                var endTime = $('#EndTime').val();
                var partsEnd = endTime.split(":");
                var hoursEnd = parseInt(partsEnd[0]);
                var minutesEnd = parseInt(partsEnd[1]);
                var totalMinutesEnd = hoursEnd * 60 + minutesEnd;
                if (totalMinutesEnd < (10 * 60) || totalMinutesEnd > (16 * 60)) {
                    $('#EndError').text('Az időpont végének 10:00 és 16:00 között kell lennie');
                    return;
                }
                else { $('#EndError').text(''); }

                if (totalMinutesEnd - totalMinutesStart < 60) {
                    $('#EndError').text('Az időpontnak legalább 1 óra hosszúnak kell lennie');
                    return;
                }
                else { $('#EndError').text(''); }

                var lastName = $("#LastName").val();
                var regexLastName = /^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ]+(?:-[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ]+)*$/;
                if (lastName=='') {
                    $('#LastNameError').text('Nem lehet üres a mező');
                    return;
                }
                else { $('#LastNameError').text(''); }

                if (!regexLastName.test(lastName)) {
                    $('#LastNameError').text('Csak kis és nagy betűket tartalmazhat és kötőjelet');
                    return;
                }
                else { $('#LastNameError').text(''); }

                var firstName = $("#FirstName").val();
                var regexFirstName = /^[a-zA-ZáéíóöőúüűÁÉÍÓÖŐÚÜŰ]+$/;
                if (firstName=='') {
                    $('#FirstNameError').text('Nem lehet üres a mező');
                    return;
                }
                else { $('#FirstNameError').text(''); }

                if (!regexFirstName.test(firstName)) {
                    $('#FirstNameError').text('Csak kis és nagy betűket tartalmazhat');
                    return;
                }
                else { $('#FirstNameError').text(''); }

                var email = $("#Email").val();
                var regexEmail = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                if (email == '') {
                    $('#EmailError').text('Nem lehet üres a mező');
                    return;
                }
                else { $('#EmailError').text(''); }

                if (!regexEmail.test(email)) {
                    $('#EmailError').text('Email formátum: Példa@@Példa.hu');
                    return;
                }
                else { $('#EmailError').text(''); }

                var phoneNumber = $("#PhoneNumber").val();
                var regexPhone = /^(?:\+36|06)(?:20|30|31|70|1\d{1,2})\d{7}$/
                if (phoneNumber == '') {
                    $('#PhoneError').text('Nem lehet üres a mező');
                    return;
                }
                else { $('#PhoneError').text(''); }

                if (!regexPhone.test(phoneNumber)) {
                    $('#PhoneError').text('06/+36 20/30/70 1234567');
                    return;
                }

                var carType = $("#CarType").val();
                if (carType == null) {
                    $('#CarTypeError').text('Nem választott típust');
                    return;
                }

                var year = $("#Year").val();
                if (isNaN(year)) {
                    $('#YearError').text('Csak évszámot lehet beírni');
                    return;
                }
                else { $('#YearError').text(''); }

                if (year > 2024 || year < 1960) {
                    $('#YearError').text('1960 és 2024 közötti évszámot');
                    return;
                }
                else { $('#YearError').text(''); }
                
                var proxydate = new AppointmentProxy(
                '@Dnn.ActiveModule.ModuleID',
                'AppointmentBookingAppointment'
                );

                proxydate.createDate(dateTime, startTime, endTime, (success, dateresponse) => {
                    if (success === false) { return }
                    else {
                        var proxyuser = new AppointmentProxy(
                            '@Dnn.ActiveModule.ModuleID',
                            'AppointmentBookingAppointment'
                        );
                        proxyuser.createUser(firstName, lastName, email, phoneNumber, carType, year, (success, userresponse) => {
                            if (success === false) { return }
                            else {
                                var proxyappointment = new AppointmentProxy(
                                    '@Dnn.ActiveModule.ModuleID',
                                    'AppointmentBookingAppointment'
                                );
                                proxyappointment.create(dateresponse.DateID, userresponse.UserID, () => {
                                    dnnModal.closePopUp(false)
                                })

                            }
                        }
                        )
                    }
                }
                )
            })
            ;
        })
}(jQuery, window.Sys));
</script>